import os

# from clickuz.models import Transaction
from django.template.defaultfilters import slugify
from django.db import models
from django.utils import timezone


class Category(models.Model):
    name = models.CharField(verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', max_length=255)
    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    class Meta:
        verbose_name = " –ö–∞—Ç–µ–≥–æ—Ä–∏—è "
        verbose_name_plural = '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs):
        self.slug = slugify(self.name)
        super(Category, self).save(*args, **kwargs)


class Guruh(models.Model):
    group_id = models.CharField(verbose_name='–ì—Ä—É–ø–ø–∞ –ò–î', max_length=255)
    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    class Meta:
        verbose_name = " –ì—Ä—É–ø–ø–∞ "
        verbose_name_plural = '–ì—Ä—É–ø–ø—ã'

    def __str__(self):
        return self.group_id


class Admin(models.Model):
    class Meta:
        verbose_name = " –ê–¥–º–∏–Ω "
        verbose_name_plural = " –ê–¥–º–∏–Ω—ã "

    name = models.CharField(verbose_name='–ê–¥–º–∏–Ω –§–ò–û', max_length=250)
    telegram = models.BigIntegerField(verbose_name='–ò–î —Ç–µ–ª–µ–≥—Ä–∞–º–º—ã', unique=True)
    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    def __str__(self):
        return self.name


class User(models.Model):
    class Meta:
        verbose_name = " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
        verbose_name_plural = " –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ "

    fullname = models.CharField(max_length=255, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π (–§–ò–û)', null=True,
                                blank=True)
    phone = models.BigIntegerField(verbose_name='–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', null=True, blank=True,
                                   unique=True)
    telegram = models.BigIntegerField(verbose_name='–ò–î —Ç–µ–ª–µ–≥—Ä–∞–º–º—ã', null=True,
                                      blank=True,
                                      unique=True)
    lang = models.CharField(max_length=2, verbose_name='–Ø–∑—ã–∫', null=True, blank=True)
    create_date = models.DateTimeField(auto_now_add=timezone.now, verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è')

    def __str__(self):
        return str(self.telegram)


class Address(models.Model):
    class Meta:
        verbose_name = " –ê–¥—Ä–µ—Å "
        verbose_name_plural = " –ê–¥—Ä–µ—Å–∞ "

    address = models.CharField(max_length=250, verbose_name='–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', null=True,
                               blank=True)
    latitude = models.FloatField()
    longitude = models.FloatField()
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –§–ò–û')

    def __str__(self):
        return self.address


class Measure(models.Model):
    name = models.CharField(max_length=200, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è")
    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"
        verbose_name_plural = "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"


class ProductQuantity(models.Model):
    measure = models.ForeignKey(Measure, on_delete=models.CASCADE,
                                verbose_name="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
    quantity = models.FloatField(verbose_name='–¶–µ–Ω–Ω–æ—Å—Ç–∏', default=0.0)

    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    def __str__(self):
        return self.measure.name

    class Meta:
        verbose_name = "–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞"
        verbose_name_plural = "–†–∞–∑–º–µ—Ä—ã –ø—Ä–æ–¥—É–∫—Ç–∞"


class Product(models.Model):
    class Meta:
        verbose_name = " –ü—Ä–æ–¥—É–∫—Ç "
        verbose_name_plural = " –ü—Ä–æ–¥—É–∫—Ç—ã "

    category = models.ForeignKey(Category, on_delete=models.CASCADE, verbose_name='–ö–∞—Ç–µ–≥–æ—Ä–∏—è')
    name = models.CharField(max_length=250, verbose_name='–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    description = models.TextField(verbose_name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ')
    amount = models.DecimalField(verbose_name='–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞', max_digits=10, decimal_places=2)
    quantity = models.FloatField(verbose_name='O–±—ä–µ–º –ø—Ä–æ–¥—É–∫—Ç–∞', default=0)
    measure = models.ManyToManyField(Measure, verbose_name="–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è")
    status = models.BooleanField(verbose_name='–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞', default=True)
    image = models.ImageField(verbose_name='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', upload_to="products/")
    time = models.IntegerField(verbose_name="–í—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞", default=0)
    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    def __str__(self):
        return self.name


class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    product = models.ForeignKey(Product, on_delete=models.CASCADE, verbose_name='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞')
    _type = models.CharField(max_length=200)
    quantity = models.CharField(max_length=200)
    amount = models.DecimalField(verbose_name='–¶–µ–Ω–∞', max_digits=15, decimal_places=2)
    status = models.BooleanField(default=True)
    create_date = models.DateTimeField(verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è', auto_now_add=timezone.now())

    def __str__(self):
        return str(self.amount)


class SMS(models.Model):
    class Meta:
        verbose_name = " SMS "
        verbose_name_plural = " SMS "

    user = models.ForeignKey(User, on_delete=models.PROTECT, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    phone = models.BigIntegerField(verbose_name='–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä', unique=True)
    code = models.CharField(verbose_name='–°–ú–°-–∫–æ–¥', max_length=6)
    status = models.BooleanField(verbose_name='–°—Ç–∞—Ç—É—Å', default=False)


class Order(models.Model):
    choice = (
        ("0", "üü† –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
        ("1", "üü¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"),
        ("2", "üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ"),
    )
    payments_status = (
        ("0", "üü† –û–∂–∏–¥–∞–µ—Ç—Å—è –ø–ª–∞—Ç–µ–∂"),
        ("1", "üü¢ –û–ø–ª–∞—á–µ–Ω–æ"),
        ("2", "üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ"),
    )
    amount = models.DecimalField(verbose_name='C—Ç–æ–∏–º–æ—Å—Ç—å', max_digits=15, decimal_places=2)
    user = models.ForeignKey(User, on_delete=models.PROTECT, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    address = models.ForeignKey(Address, on_delete=models.PROTECT, verbose_name='–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', null=True,
                                blank=True)
    payment_type = models.CharField(verbose_name='–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', choices=payments_status,
                                    max_length=55)
    pay_type = models.CharField(max_length=18, null=True, blank=True)
    admin_status = models.CharField(verbose_name='–°–¢–ê–¢–£–° –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', choices=choice, max_length=30)
    status = models.BooleanField(default=True)
    distance = models.FloatField(null=True, blank=True)
    a_status = models.CharField(max_length=50, null=True, blank=True)
    create_date = models.DateField(verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = " –ó–∞–∫–∞–∑ "
        verbose_name_plural = " –ó–∞–∫–∞–∑—ã "

    def __str__(self):
        return str(self.id)


class OrderSale(models.Model):
    order = models.ForeignKey(Order, on_delete=models.PROTECT, verbose_name="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
    product = models.ForeignKey(Product, on_delete=models.PROTECT, verbose_name='–ü—Ä–æ–¥—É–∫—Ç–∞')
    quantity = models.IntegerField(verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', default=0)
    _type = models.CharField(max_length=200)
    amount = models.DecimalField(verbose_name='–¶–µ–Ω–∞', max_digits=15, decimal_places=2)
    user = models.ForeignKey(User, on_delete=models.PROTECT, verbose_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    create_date = models.DateField(verbose_name='–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è')

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"

    def __str__(self):
        return self.product.name


class Dastavka_Price(models.Model):
    amount = models.DecimalField(max_digits=10, decimal_places=1)
    _from = models.FloatField()
    _to = models.FloatField()
    create_date = models.DateTimeField(auto_now_add=timezone.now)
    update_date = models.DateTimeField(auto_now=timezone.now)

    def __str__(self):
        return 'Succesfully'

    class Meta:
        verbose_name = "–¶–µ–Ω—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"
        verbose_name_plural = "–¶–µ–Ω—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"
